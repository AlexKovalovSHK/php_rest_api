name: Build and Deploy PHP REST API
on:
  push:
    branches: [ "main" ]

env:
  PHP_IMAGE: "php-rest-api"
  ARCHIVE_NAME: "images.tar"
  DEPLOY_DIR: "/var/www/php-rest-api"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ PHP —Å entrypoint
      - name: Build PHP image
        run: |
          docker build -t ${{ env.PHP_IMAGE }} .

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–∑ –≤ –∞—Ä—Ö–∏–≤
      - name: Save image to tar
        run: |
          docker save ${{ env.PHP_IMAGE }} -o ${{ env.ARCHIVE_NAME }}

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sshpass
      - name: Install sshpass
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass

      # –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      - name: Deploy to Server
        run: |
          # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"

          # –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –∏ docker-compose.prod.yml –í –ü–ê–ü–ö–£ (–Ω–µ –≤ —Ñ–∞–π–ª!)
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no ${{ env.ARCHIVE_NAME }} docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.DEPLOY_DIR }}/

          # –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            cd ${{ env.DEPLOY_DIR }} && \
            echo "üéØ Renaming docker-compose.prod.yml to docker-compose.yml" && \
            mv docker-compose.prod.yml docker-compose.yml && \
            echo "üì¶ Loading Docker image..." && \
            docker load -i ${{ env.ARCHIVE_NAME }} && \
            echo "üõë Stopping old containers..." && \
            docker-compose down && \
            echo "üöÄ Starting new containers..." && \
            docker-compose up -d && \
            echo "üßπ Cleaning up..." && \
            rm -f ${{ env.ARCHIVE_NAME }} && \
            docker image prune -f
          '